
//Anleitung:;
//1. Erstes Bild der Serie öffnen
//2. Wenn Zwischenbilder gezeigt werden sollen Variable bilderzeigen = 1 setzen;
//3. Macro starten;
// Achtung: Beim Setzen des ersten Schwellenwertes NICHT auf "Apply" klicken 
//		-> nur Popup Nachricht mit "OK" bestätigen 


//Changelog:
// 01.07.: Macro Created - Calculates Area and Normalized Green Value
// 14.08.: Adapted Macro for larval food intake
//		- Saturation of whole larvae is printed (ResultsAverage) 
//			-> the lower the Saturation, the "redder" it is!
//		- Threshold is set for the first picture 
//			-> keep it similar for 18°C and 32°C
// 04.01.13: Added "Invert" for BodyUmriss - apparently this changed in recent FijiVersions

var weiter = 1;
var bilderzeigen = 1;
var PicWidth;
var PicHeight;
var titel;
var pfad;

var MaxY = screenHeight();
var MaxX = screenWidth()/3-20;

var UpperThreshold, LowerThreshold;



function ArrangeWindows(){
	selectWindow("Mask of Duplicate Umriss");	
	setLocation(0, 100,MaxX,MaxY);

	selectWindow(titel);
	setLocation(MaxX, 100,MaxX,MaxY);

	selectWindow("Duplicate Rot");
	setLocation(MaxX+MaxX, 100,MaxX,MaxY);
}


function GetArea(ResultsUmriss, ResultsArea, runs){
	run("Set Measurements...", "area redirect=None decimal=4");
	
	selectWindow("Result of "+titel);
	roiManager("Select", 1);
	run("Measure");
	run("RGB Stack");
	wait(30);
	run("Convert Stack to Images");	
	selectWindow("Blue");
	close();
	imageCalculator("Difference create", "Red","Green");
	selectWindow("Red");
	close();
	selectWindow("Green");
	close();
	selectWindow("Result of Red");
	run("To Selection");
	setLocation(0,0);

 	if (runs == 0){ 
		run("Threshold...");
		waitForUser("Adjust threshold");
		getThreshold(LowerThreshold, UpperThreshold);
		
		if (LowerThreshold == 255){
			LowerThreshold= getNumber("Fehler - bitte unteren Schwellenwert manuel eingeben",50);
		}


		print("LowerThreshold: " + toString(LowerThreshold));
		print("UpperThreshold: " +  toString(UpperThreshold));
		}
	else{
		setThreshold(LowerThreshold, UpperThreshold);			
	}

	run("Convert to Mask");
	run("Remove Outliers...", "radius=5 threshold=1 which=Dark");
	//run("Fill Holes");
	run("Create Selection");
	x = selectionType();
	//print(x);
	if (x != -1){
	roiManager("Add");
	run("Measure");
	ResultsArea[runs] = getResult("Area", 1);
		}
	else  {
	ResultsArea[runs] = 0;
	}
	ResultsUmriss[runs] = getResult("Area", 0);
	
	close();		
}

function GetSaturation(ResultsMean, ResultsAverage, runs){
	run("Set Measurements...", "  mean redirect=None decimal=4");
	run("Clear Results");
	selectWindow(titel);
	run("Select None");
	roiManager("Select", 0);
	run("Duplicate...", "title=[DuplicateStain]");
	setBackgroundColor(0, 0, 0);
	run("Clear Outside");
	run("Crop");
	run("RGB Stack");
	wait(30);
	run("Convert Stack to Images");	
	selectWindow("Blue");
	close();
	selectWindow("Red");
	close();
	selectWindow("Green");
	roiManager("Select", 1);
	run("Measure");
	ResultsAverage[runs]= getResult("Mean",0);	

	if (roiManager("count") == 3) {
	roiManager("Select", 2);
	run("Measure");
	ResultsMean[runs]= getResult("Mean",0) - getResult("Mean",1);
	}
	else {
	ResultsMean[runs] = 0;
	}	
	close();
	
	

}



function SaveProcessed(){
	selectWindow(titel);
	savetitel = "\\" + substring(titel, 0, lengthOf(titel)-4) + " - processed";

	pfad = getInfo("image.directory") + "\Processed";
	roiManager("Select", 0);
	run("Duplicate...", "title=[DuplicateUmriss]");
	setBackgroundColor(0, 255, 0);
	setForegroundColor(0, 255, 0);
	run("Clear Outside");
	run("Crop");
	File.makeDirectory(pfad);
	saveAs("Tiff", pfad + savetitel);

	if (roiManager("count") == 3) {
	roiManager("Select", 2);
	run("Clear Outside");	
	}
	else{
	run("Select All");
	run("Fill", "slice");
	}
	savetitel = "\\" + substring(titel, 0, lengthOf(titel)-4) + " - red processed";	
	saveAs("Tiff", pfad + savetitel);
	close();
	setForegroundColor(0, 0, 0);
	setBackgroundColor(255, 255, 255);			
	
}




function GetBodyUmriss(){

	var UmrissBrightMin = 70;
	var UmrissBrightMax = 255;
		
	titel = getInfo("image.filename");
	
	setBackgroundColor(255, 255, 255);

	run("Duplicate...", "title=[DuplicateUmriss]");
	//run("Threshold...");
	// Color Thresholder 1.46a
	// Autogenerated macro, single images only!
	min=newArray(3);
	max=newArray(3);
	filter=newArray(3);
	a=getTitle();
	run("HSB Stack");
	wait(30);
	run("Convert Stack to Images");
	selectWindow("Hue");	
	rename("0");
	selectWindow("Saturation");
	rename("1");
	selectWindow("Brightness");
	rename("2");
	min[0]=0;
	max[0]=255;
	filter[0]="pass";
	min[1]=0;
	max[1]=255;
	filter[1]="pass";
	min[2]=UmrissBrightMin;
	max[2]=UmrissBrightMax;
	filter[2]="pass";
	for (i=0;i<3;i++){
		selectWindow(""+i);
  		setThreshold(min[i], max[i]);
 		run("Convert to Mask");
  		if (filter[i]=="stop")  run("Invert");
	}
	imageCalculator("AND create", "0","1");
	imageCalculator("AND create", "Result of 0","2");
	for (i=0;i<3;i++){
  		selectWindow(""+i);
  		close();
	}
	selectWindow("Result of 0");
	close();
	selectWindow("Result of Result of 0");
	rename(a);
	// Colour Thresholding-------------
        	//run("Invert");
	run("Remove Outliers...", "radius=20 threshold=50 which=Dark");	

	
	imageCalculator("Difference create", titel,"DuplicateUmriss");

	selectWindow("DuplicateUmriss");
	
	run("Create Selection");	
	roiManager("Add");
	close();

	selectWindow("Result of "+titel);
	//run("Enhance Local Contrast (CLAHE)", "blocksize=127 histogram=256 maximum=3 mask=*None* fast_(less_accurate)");
	roiManager("Select", 0);
	run("Clear Outside");
	run("Crop");
	roiManager("Add");
	run("To Selection");
}


print("\\Clear");


totalruns 		= getNumber("Number of images", 1);
totalruns2		= totalruns-1;

FileList 		= newArray(totalruns);

ResultsMean 		= newArray(totalruns);		//Mean Value of red-stained Area
ResultsAverage	= newArray(totalruns);		//Mean Value of whole Body

ResultsUmriss	=  newArray(totalruns);		//size of whole body shape
ResultsArea  		=  newArray(totalruns);		//size of red-stained area


//hier fängt die Schleife an

 for (j=0; j<totalruns; j++) {
	run("Select None");
	run("Clear Results");
	roiManager("Reset");
	titel = getInfo("image.filename");
	FileList[j] =getInfo("image.filename");
	
	GetBodyUmriss();
	GetArea(ResultsUmriss, ResultsArea, j);
	GetSaturation(ResultsMean, ResultsAverage, j);
	SaveProcessed();
  
	print("Filename: " + titel);
	print("Body: " + ResultsUmriss[j]);
	print("Stained: " + ResultsArea[j]);
	print("Mean: " + ResultsMean[j]);
	print("Average: " + ResultsAverage[j]);
	print("");
	
	if (j<totalruns2){
		run("Open Next");
		}
 	 }  


//Prints the final results
	name = "[Final Results]";
	run("New... ", "name="+name+" type=Table");
	f = name;
	print(f, "\\Clear");
	print(f, "\\Headings: DatName	stained[%]	Saturation(whole larva)	ingested yeast[pixel]	body[pixel]");


	run("Clear Results");
 	 for (h=0; h<totalruns; h++) {

		percentstained = ResultsArea[h]/ResultsUmriss[h];
		percentstained  = toString(percentstained );
		percentstained  = replace(percentstained , "\\.","\\,");

		ResultsArea[h] = toString(ResultsArea[h]);
		ResultsArea[h] = replace(ResultsArea[h], "\\.","\\,");

		ResultsMean[h] = toString(ResultsMean[h]);
		ResultsMean[h] = replace(ResultsMean[h], "\\.","\\,");

		ResultsUmriss[h] = toString(ResultsUmriss[h]);
		ResultsUmriss[h] = replace(ResultsUmriss[h], "\\.","\\,");
		
		ResultsAverage[h] = toString(ResultsAverage[h]);
		ResultsAverage[h] = replace(ResultsAverage[h], "\\.","\\,");

		
		print(f, FileList[h] + "	" + percentstained + "	" + ResultsAverage[h] + "	" + ResultsArea[h] + "	" + ResultsUmriss[h]);		 
  	 }


